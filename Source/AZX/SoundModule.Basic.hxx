/*
Copyright (c) 2023 Americus Maximus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#pragma once

#include "Basic.hxx"

#define SOUND_MODULE_VERSION_MAJOR 18
#define SOUND_MODULE_VERSION_MINOR 5

#define ACQUIRE_SOUND_MODULE_VERSION_MAJOR(value) (value >> 16)
#define ACQUIRE_SOUND_MODULE_VERSION_MINOR(value) (value & 0xffff)

#define INITIALIZE_SOUND_MODULE_VERSION(major, minor) ((major << 16) | (minor & 0xffff))

#define SOUND_MODULE_VERSION INITIALIZE_SOUND_MODULE_VERSION(SOUND_MODULE_VERSION_MAJOR, SOUND_MODULE_VERSION_MINOR)

#define SOUND_MODULE_SUCCESS 0
#define SOUND_MODULE_FAILURE (-1)
#define SOUND_MODULE_MISSING_DRIVER_FAILURE (-10)
#define SOUND_MODULE_INVALID_VERSION_FAILURE (-11)
#define SOUND_MODULE_ALREADY_ALLOCATED_FAILURE (-18)

#define INVALID_SOUND_MODULE_CAPABILITIES (-1)

#define SOUND_MODULE_CAPABILITIES_NONE 0

#define SOUND_MODULE_CAPABILITIES_8BIT_MONO 0x1
#define SOUND_MODULE_CAPABILITIES_8BIT_STEREO 0x2
#define SOUND_MODULE_CAPABILITIES_16BIT_MONO 0x4
#define SOUND_MODULE_CAPABILITIES_16BIT_STEREO 0x8

#define SOUND_MODULE_CAPABILITIES_ANY_BITS_ANY (SOUND_MODULE_CAPABILITIES_16BIT_STEREO | SOUND_MODULE_CAPABILITIES_16BIT_MONO | SOUND_MODULE_CAPABILITIES_8BIT_STEREO | SOUND_MODULE_CAPABILITIES_8BIT_MONO)

#define SOUND_MODULE_CAPABILITIES_FREQUENCY_11025 0x200
#define SOUND_MODULE_CAPABILITIES_FREQUENCY_16000 0x400
#define SOUND_MODULE_CAPABILITIES_FREQUENCY_22050 0x800
#define SOUND_MODULE_CAPABILITIES_FREQUENCY_32000 0x1000
#define SOUND_MODULE_CAPABILITIES_FREQUENCY_44100 0x2000

#define SOUND_MODULE_CAPABILITIES_FREQUENCY_ANY (SOUND_MODULE_CAPABILITIES_FREQUENCY_44100 | SOUND_MODULE_CAPABILITIES_FREQUENCY_32000 | SOUND_MODULE_CAPABILITIES_FREQUENCY_22050 | SOUND_MODULE_CAPABILITIES_FREQUENCY_16000 | SOUND_MODULE_CAPABILITIES_FREQUENCY_11025)

#define SOUND_MODULE_CAPABILITIES_UNKNOWN 0x10000 /* TODO */
#define SOUND_MODULE_CAPABILITIES_3D_BUFFER_SUPPORTED 0x20000
#define SOUND_MODULE_CAPABILITIES_REVERB_SUPPORTED 0x40000

namespace SoundModule
{
    typedef const void (STDCALLAPI* SOUNDMODULEACQUIREDATALAMBDA) (void* buffer, const u32 size);
    typedef const void (STDCALLAPI* SOUNDMODULESTOPSOUNDBUFFERLAMBDA) (const u32 indx);
    typedef const void (STDCALLAPI* SOUNDMODULELOGMESSAGELAMBDA) (const char* message);
    typedef const void (STDCALLAPI* SOUNDMODULEUNKNOWN4LAMBDA) (void);
    typedef const void (STDCALLAPI* SOUNDMODULEUNKNOWN5LAMBDA) (void);
    typedef const void (STDCALLAPI* SOUNDMODULEUNKNOWN6LAMBDA) (const u32 value);
    typedef const void (STDCALLAPI* SOUNDMODULEACQUIRESOUNDBUFFERPOSITIONLAMBDA) (const u32 p1, const u32 p2, f32x3* position); // TODO
    typedef const s32(STDCALLAPI* SOUNDMODULECONVERTSOUNDSAMPLELAMBDA) (const u32 p1, const u32 srcsamplerep, const u32 channels, const u32 p4, const u32 p5, const u32 p6, void* p7, const u32 dstsamplerep, const u32 dstnumchan); // TODO
}